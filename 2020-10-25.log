[08:31:48] *** Joins: belcher_ (~belcher@unaffiliated/belcher)
[08:35:02] *** Quits: belcher (~belcher@unaffiliated/belcher) (Ping timeout: 260 seconds)
[09:03:54] *** belcher_ is now known as belcher
[21:18:30] *** Joins: fogof (49a23865@c-73-162-56-101.hsd1.ca.comcast.net)
[21:21:04] <fogof> Hey, a collaborator and I have been working on a fork of the utreexo project, and we had a question about the swapping mechanism.
[21:23:23] <fogof> It seems like each hash is put in a location in the forest file which corresponds to its location in one of the binary trees, and that when leaves are deleted, the other leaves and hashes are moved around to reorganize the tree into the perfect binary forest structure.
[21:28:28] <fogof> My question is this: If a single leaf is deleted from a large binary tree of size 2^{n+1}, and a tree of size 2^{n} already exists, isn't it necessary to move 2^n hashes to create another tree of size 2^{n+1}? This seems inefficient to me, since it means in the worst case, a deletion operation is superlinear in the number of elements being deleted.
[21:28:28] <fogof> Is this case just particularly rare? Or is this operation faster in hardware?
