[00:40:15] <dergoegge> yeah it hashes all the way up to the top. we had code that checks if a position is cached and does not hash but that was actually a bad idea see #218. 
[00:40:25] <dergoegge> but only hashing up to populated nodes makes a lot of sense
[00:41:21] <dergoegge> its tricky to do though because there could be hashes in the proof that you then dont actually need 
[00:43:38] <dergoegge> or maybe it would work if you just have the correct partial proofs?
[00:46:53] <dergoegge> right now the verify needs the entire proof thats true, so that has to change
[00:49:02] <dergoegge> by making it a method of pollard you mean doing verification and ingestion at the same time?
[00:50:58] <dergoegge> the part that i dont like about verifyBatchProof is this loop: https://github.com/mit-dci/utreexo/blob/98f07897bde61dfe9a8f8d4944183b5f7d4402a7/accumulator/batchproof.go#L179
[00:51:18] <dergoegge> it only exists because the target hashes are included in the proof
[02:23:04] <adiabat> ah right, target hashes shouldn't be in the proof part, we're sending the leafdata anyway so it's redundant to send target hashes
[02:28:04] <adiabat> and yeah, if sending less than the whole proof it needs to match up ... it should be doable but maybe have to change the format of the proof hashes a little
[03:53:51] *** Joins: belcher_ (~belcher@unaffiliated/belcher)
[03:57:36] *** Quits: belcher (~belcher@unaffiliated/belcher) (Ping timeout: 272 seconds)
[10:21:57] *** Joins: icota[m] (icotamatri@gateway/shell/matrix.org/x-ioilacnvpmsguvbw)
[10:30:20] *** belcher_ is now known as belcher
[17:35:34] <dergoegge> adiabat: just fyi i think this block: https://github.com/mit-dci/utreexo/blob/hashtoknown/accumulator/batchproof.go#L267-L286 can can also be deleted because we are already checking against the roots here: https://github.com/mit-dci/utreexo/blob/b8bcb961c6b99d0f80685dd36675a909c153c9d9/accumulator/batchproof.go#L249
[19:19:56] *** Quits: belcher (~belcher@unaffiliated/belcher) (Quit: Leaving)
