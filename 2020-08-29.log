[03:14:08] <adiabat> OK reading it more:
[03:14:45] <adiabat> the deletion actually doesn't seem like much of a problem and could be adapted to something like the utreexo model
[03:15:18] <adiabat> you'd just need to keep some data about which leaves are near you as part of your inclusion proof & deletion data
[03:15:28] <adiabat> so maybe a little bigger but I think would still work
[03:15:45] <adiabat> the bigger problem in this paper for our model is that *additions* need lots of leaf data
[03:16:22] <adiabat> since the whole leaf set on the bottom is sorted, if you make a new utxo, in order to insert it you need to know what comes before and after it
[03:16:54] <adiabat> so you'd need a bridge node & proof to create a leaf
[03:17:33] <adiabat> that means you'd never be able to get rid of bridge nodes, even in theory, since you don't know where your new outputs will show up
[03:18:10] <adiabat> though in practice utreexo will probably never be able to get rid of bridge nodes because it's bitcoin, if you started a system from scratch it could
[03:18:47] <adiabat> also it just seems much nicer to not need any proofs to put new elements into the accumulator
[03:19:20] <adiabat> I didn't even realize that was needed for a while when reading the paper because I'm used to utreexo and... there's nothing to "prove" when inserting :)
[13:11:52] *** Joins: ghost43_ (~daer@gateway/tor-sasl/daer)
[13:12:43] *** Quits: ghost43 (~daer@gateway/tor-sasl/daer) (Ping timeout: 240 seconds)
[19:25:04] *** Joins: belcher (~belcher@unaffiliated/belcher)
